/*public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (numRows <= 0) {   //int cannot convert to boolean   
            return result;
        }
        ArrayList<Integer> first = new ArrayList<Integer>();
        first.add(1);
        result.add(first);
        ArrayList<Integer> up = new ArrayList<Integer>();//method need to add ()
        for (int i = 2; i < numRows; i++) {
            ArrayList<Integer> now = new ArrayList<Integer>();
            now.add(1);
            for(int j = 0; j < up.size() - 1; j++){
                //now[j+1] = up[j]+up[j+1];
                now.add(up.get(j) + up.get(j+1));
            }
            now.add(1);
            result.add(now);
            up = now;
        }
        return result;
    }
}*/
public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<List<Integer>>(); //?why define the arraylist in this way
        if(numRows == 0)
            return result;
        ArrayList<Integer> first = new ArrayList<Integer>();     
        first.add(1);
        result.add(first);
        
        for(int n = 2; n <= numRows; n++){
            ArrayList<Integer> thisRow = new ArrayList<Integer>();
            //the first element of a new row is one
            thisRow.add(1);
            //the middle elements are generated by the values of the previous rows
            //A(n+1)[i] = A(n)[i - 1] + A(n)[i]
            List<Integer> previousRow = result.get(n- 2);
            for(int i = 1; i < n - 1; i++){
                thisRow.add(previousRow.get(i - 1) + previousRow.get(i));
            }
            //the last element of a new row is also one
            thisRow.add(1);
            result.add(thisRow);
        }
        
        return result;
    }
}